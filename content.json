{"meta":{"title":"欢迎来的我的个人博客","subtitle":"","description":"","author":"Yekezhen","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2022-01-14T03:55:17.000Z","updated":"2022-01-14T03:56:40.162Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"文章归档","date":"2022-01-14T04:06:23.570Z","updated":"2022-01-14T03:59:14.282Z","comments":true,"path":"archive.html","permalink":"http://example.com/archive.html","excerpt":"","text":""},{"title":"","date":"2022-01-14T04:18:26.903Z","updated":"2022-01-14T04:18:26.903Z","comments":true,"path":"categories.html","permalink":"http://example.com/categories.html","excerpt":"","text":""}],"posts":[{"title":"栈","slug":"队列","date":"2022-01-14T04:20:42.383Z","updated":"2022-01-14T04:46:54.299Z","comments":true,"path":"2022/01/14/队列/","link":"","permalink":"http://example.com/2022/01/14/%E9%98%9F%E5%88%97/","excerpt":"","text":"具体思路，用数组去模拟栈，与队列不同的是，栈是先进后出，后进先出，只需一个变量top即可控制流程，最大值（栈）的容量依旧为maxsize-1 创建栈123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111$ import java.util.Scanner;public class Main&#123; public static void main(String[] args) &#123; arraystack stack = new arraystack(4); char key; boolean loop=true; Scanner scanner = new Scanner(System.in); while(loop) &#123; System.out.printf(&quot;S(show)\\n&quot;); System.out.printf(&quot;E(Exit)\\n&quot;); System.out.printf(&quot;P(POP)\\n&quot;); System.out.printf(&quot;U(PUSH)\\n&quot;); key=scanner.next().charAt(0); switch(key) &#123; case&#x27;S&#x27;: stack.list(); break; case&#x27;E&#x27;: scanner.close(); loop=false; break; case&#x27;P&#x27;: try&#123; int res= stack.pop(); System.out.printf(&quot;出栈的数据是%d\\n&quot;,res); &#125;catch(Exception e) &#123; //TODO handle exception System.out.println(e.getMessage()); &#125; break; case&#x27;U&#x27;: System.out.printf(&quot;输入一个整形数据\\n&quot;); int value=scanner.nextInt(); stack.push(value); break; &#125; &#125; &#125;&#125;class arraystack&#123; private int maxsize; private int [] stack; private int top=-1; public arraystack(int maxsize) &#123; this.maxsize=maxsize; stack=new int[maxsize]; &#125; public boolean isFull() &#123; return top==maxsize-1; &#125; public boolean isEmpty() &#123; return top==-1; &#125; public void push(int value) &#123; if(isFull()) &#123; System.out.printf(&quot;队列满&quot;); return; &#125; top++; stack[top]=value; &#125; public int pop() &#123; if(isEmpty()) &#123; throw new RuntimeException(&quot;队列为空~~&quot;); &#125; int value = stack[top]; top--; return value; &#125; public void list() &#123; if(isEmpty()) &#123; System.out.printf(&quot;空！！！无数据\\n&quot;); return; &#125; for(int i=top;i&gt;=0;i--) &#123; System.out.printf(&quot;Stack[%d]=%d\\n&quot;,i,stack[i]); &#125; &#125;&#125;","categories":[{"name":"数构算法","slug":"数构算法","permalink":"http://example.com/categories/%E6%95%B0%E6%9E%84%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"TEST","slug":"categories","date":"2022-01-14T04:18:43.356Z","updated":"2022-01-14T08:25:09.353Z","comments":true,"path":"2022/01/14/categories/","link":"","permalink":"http://example.com/2022/01/14/categories/","excerpt":"","text":"categories: 数构算法 Leetcode oj","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-13T13:36:50.434Z","updated":"2022-01-14T04:19:08.855Z","comments":true,"path":"2022/01/13/hello-world/","link":"","permalink":"http://example.com/2022/01/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"数构算法","slug":"数构算法","permalink":"http://example.com/categories/%E6%95%B0%E6%9E%84%E7%AE%97%E6%B3%95/"}],"tags":[]}],"categories":[{"name":"数构算法","slug":"数构算法","permalink":"http://example.com/categories/%E6%95%B0%E6%9E%84%E7%AE%97%E6%B3%95/"}],"tags":[]}